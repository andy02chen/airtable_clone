// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl= env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])  
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId]) 
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model Base {
    id      Int      @id @default(autoincrement())
    userId        String
    name          String
    user          User   @relation(fields: [userId], references: [id])
    tables Table[]  

    @@index([userId]) 
}

model Table {
  id      Int      @id @default(autoincrement())
  baseId  Int
  name    String
  base    Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns Column[]
  rows    Row[]
  
  @@index([baseId])
}

model Column {
  id      Int        @id @default(autoincrement())
  tableId Int
  name    String
  type    ColumnType @default(TEXT)
  order   Int        @default(0)
  table   Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells   Cell[]

  @@index([tableId])
  @@index([tableId, order])
}

model Row {
  id      Int    @id @default(autoincrement())
  tableId Int
  order   Int    @default(0)
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells   Cell[]
  
  @@index([tableId])
  @@index([tableId, order])
}

model Cell {
  id         Int     @id @default(autoincrement())
  rowId      Int
  columnId   Int
  value      String?
  numericValue Int?
  row        Row     @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column     Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  
  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
  @@index([columnId, value])
  @@index([columnId, numericValue])
  @@index([value])
}

enum ColumnType {
  TEXT
  NUMBER 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
